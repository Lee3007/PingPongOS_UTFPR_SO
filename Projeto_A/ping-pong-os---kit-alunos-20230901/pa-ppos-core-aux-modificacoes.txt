struct sigaction action;
struct itimerval timer;
const int quantum = 20;
int currentTaskRemainingTicks = quantum;

void task_set_eet(task_t *task, int et)
{
    if (task == NULL)
        task = taskExec;
    task->estimatedExecTime = et;
}

int task_get_eet(task_t *task)
{
    if (task == NULL)
        task = taskExec;
    return task->estimatedExecTime;
}

int task_get_ret(task_t *task)
{
    if (task == NULL)
        task = taskExec;
    return task->estimatedExecTime - task->running_time;
}

void tick_handler(int signum)
{
    incrementAllTasksExecutionTimes();
    systemTime += 1;

    if (taskExec->id == taskDisp->id || taskExec->id == taskMain->id)
        return;

    taskExec->running_time++;
    currentTaskRemainingTicks--;
    if (currentTaskRemainingTicks == 0)
        task_yield();
}

void incrementAllTasksExecutionTimes()
{
    if (readyQueue == NULL)
        return;

    task_t *taskIterator = readyQueue;
    do
    {
        taskIterator->executionTime++;
        taskIterator = taskIterator->next;
    } while (taskIterator->id != readyQueue->id);

    taskExec->executionTime++;
}

void task_setprio(task_t *task, int prio) {}

int task_getprio(task_t *task) { return 0; }

void after_ppos_init()
{
    // put your customization here
    action.sa_handler = tick_handler;
    sigemptyset(&action.sa_mask);
    action.sa_flags = 0;
    if (sigaction(SIGALRM, &action, 0) < 0)
    {
        perror("Erro em sigaction: ");
        exit(1);
    }
    timer.it_value.tv_usec = 1000;    // primeiro disparo, em micro-segundos
    timer.it_value.tv_sec = 0;        // primeiro disparo, em segundos
    timer.it_interval.tv_usec = 1000; // disparos subsequentes, em micro-segundos
    timer.it_interval.tv_sec = 0;     // disparos subsequentes, em segundos
    if (setitimer(ITIMER_REAL, &timer, 0) < 0)
    {
        perror("Erro em setitimer: ");
        exit(1);
    }

    if (taskMain != NULL)
    {
        task_set_eet(taskMain, 999999);
    }
    printf("PPOS intialized successfully...\n");
#ifdef DEBUG
    printf("\ninit - AFTER");
#endif
}

void after_task_create(task_t *task)
{
    // put your customization here
    task->running_time = 0;
    task->executionTime = 0;
    task->numberOfActivations = 0;
#ifdef DEBUG
    printf("\ntask_create - AFTER - [%d]", task->id);
#endif
}

void after_task_exit()
{
    // put your customization here
    printf("\nTask %d exit: execution time %d ms, processor time %d ms, %d activations\n",
           taskExec->id,
           taskExec->executionTime,
           taskExec->running_time,
           taskExec->numberOfActivations);
#ifdef DEBUG
    printf("\ntask_exit - AFTER- [%d]", taskExec->id);
#endif
}

void after_task_yield()
{
    // put your customization here
    currentTaskRemainingTicks = quantum;
#ifdef DEBUG
    printf("\ntask_yield - AFTER - [%d]", taskExec->id);
#endif
}

task_t *scheduler()
{
    if (readyQueue == NULL)
        return NULL;

    // A fila de tarefas prontas Ã© circular
    // Percorre a lista e encontra o que possui menor ret
    int lowestRET = __INT_MAX__;
    int currentRET;

    task_t *selectedTask = NULL;
    task_t *taskIterator = readyQueue;
    do
    {
        currentRET = task_get_ret(taskIterator);
        if (currentRET < lowestRET)
        {
            lowestRET = currentRET;
            selectedTask = taskIterator;
        }
        taskIterator = taskIterator->next;
    } while (taskIterator->id != readyQueue->id);

    selectedTask->numberOfActivations++;

    return selectedTask;
}